{"ast":null,"code":"/**\n * @deprecated - will be removed in a future major version\n *\n * Some libraries may not follow Node ES module spec and could be loaded as CommonJS modules,\n * To ensure the interoperability between ESM and CJS, modules from those libraries have to be loaded via namespace import\n * And sanitized by the function below because unlike ESM namespace, CJS namespace set `module.exports` object on the `default` key\n * https://nodejs.org/api/esm.html#interoperability-with-commonjs\n */\nconst sanitizeNamespaceImport = namespaceModule => {\n  const sanitizedNamespaceModule = {\n    default: undefined,\n    ...namespaceModule\n  };\n  return sanitizedNamespaceModule.default ?? sanitizedNamespaceModule;\n};\n/**\n * Checks if `value` is an Object (non-primitive, non-array, non-function)\n * Will return false for Arrays and functions\n *\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is an object, `false` otherwise\n */\nfunction isObject(value) {\n  return value != null && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * Checks if `value` is a string primitive or object\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a string, `false` otherwise\n */\nfunction isString(value) {\n  return typeof value === 'string' || typeof value === 'object' && Object.prototype.toString.call(value) === '[object String]';\n}\n/**\n * Checks if `value` is a Map\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a Map, `false` otherwise\n */\nfunction isMap(value) {\n  return isObject(value) && Object.prototype.toString.call(value) === '[object Map]';\n}\n/**\n * Checks if `value` is a Set\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a Set, `false` otherwise\n */\nfunction isSet(value) {\n  return isObject(value) && Object.prototype.toString.call(value) === '[object Set]';\n}\n/**\n * Checks if `value` is undefined\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is undefined, `false` otherwise\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n/**\n * Checks if `value` is nullish\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is nullish, `false` otherwise\n */\nfunction isNil(value) {\n  return value == null;\n}\n/**\n * Checks if `value` is empty\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is empty, `false` otherwise\n */\nfunction isEmpty(value) {\n  if (value === null || value === undefined) return true;\n  if (isObject(value) && (isMap(value) || isSet(value))) {\n    return !value.size;\n  }\n  if (isObject(value) && (isString(value) || Array.isArray(value))) {\n    return !value.length;\n  }\n  for (const key in value) {\n    if (has(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Checks if `value` is an empty array\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a empty, `false` otherwise\n */\nfunction isEmptyArray(value) {\n  return Array.isArray(value) && isEmpty(value);\n}\n/**\n * Checks if all members of the `values` param are empty arrays\n *\n * @param {unknown} value The values to check\n * @returns {boolean} Returns `true` if all members of `values` are empty, `false` otherwise\n */\nfunction areEmptyArrays() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n  return values.every(isEmptyArray);\n}\n/**\n * Checks if `value` is an empty object\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is empty, `false` otherwise\n */\nfunction isEmptyObject(value) {\n  return isObject(value) && isEmpty(value);\n}\n/**\n * Checks if all members of the `values` param are empty objects\n *\n * @param {unknown} values The values to check\n * @returns {boolean} Returns `true` if all members of the `values` param are empty, `false` otherwise\n */\nfunction areEmptyObjects() {\n  for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    values[_key2] = arguments[_key2];\n  }\n  return values.every(isEmptyObject);\n}\n/**\n * Capitalizes `value` and its return type\n *\n * @param {string} value string to capitalize\n * @returns {string} capitalized string\n */\nfunction capitalize(value) {\n  return isString(value) ? value.charAt(0).toUpperCase() + value.slice(1) : '';\n}\n/**\n * Checks if `key` is a direct property of `value`\n *\n * @param {unknown} value `object` potentially containing property\n * @param {string} key property key\n * @returns whether `key` param is a property of the `obj` param\n */\nfunction has(value, key) {\n  return value != null && Object.prototype.hasOwnProperty.call(value, key);\n}\n/**\n * Checks if `value` is a function\n *\n * @param {unknown} value param to check\n * @returns {boolean} whether `value` is a function\n */\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n/**\n * This helper function creates modifier class names that are used for our flat BEM styling\n * it takes in a base and modifier and returns the modified class if a modifier was passed in and null otherwise\n * @param base The base class of the output\n * @param modifier The modifier to add onto the base\n * @returns the modified class name or empty string\n */\nconst classNameModifier = (base, modifier) => {\n  return modifier ? `${base}--${modifier}` : '';\n};\n/**\n * This helper function creates modified class names that are used for our flat BEM styling\n * it takes in a base, modifier, and flag and returns the modified class name if the flag is true and null if the flag is false\n * @param base\n * @param modifier\n * @param flag\n * @returns the modified class name or empty string\n */\nconst classNameModifierByFlag = (base, modifier, flag) => {\n  return flag ? `${base}--${modifier}` : '';\n};\n/**\n * Similar to `Array.join`, with an optional callback/template param\n * for formatting returned string values\n *\n * @param {string[]} values string array\n * @param {(value: string) => string} template callback format param\n * @returns formatted string array\n */\nfunction templateJoin(values, template) {\n  return values.reduce((acc, curr) => `${acc}${isString(curr) ? template(curr) : ''}`, '');\n}\n/**\n * A function that does nothing\n *\n * @param {any[]} _ accepts any parameters\n * @returns nothing\n */\nfunction noop() {\n  return;\n}\n/**\n * @param {string} groupName name of group\n * @param events string values related to group\n */\nfunction groupLog(groupName) {\n  for (var _len3 = arguments.length, events = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    events[_key3 - 1] = arguments[_key3];\n  }\n  const hasEvents = !!events?.length;\n  if (hasEvents) {\n    // eslint-disable-next-line no-console\n    console.groupCollapsed(groupName);\n    events?.forEach(event => {\n      // eslint-disable-next-line no-console\n      console.log(event);\n    });\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(groupName);\n  }\n}\n/**\n * Splits an object into 2 objects based on a predicate\n *\n * @param {object} obj an object to split into two\n * @param {function} predicate function to determin where an element should go\n * @returns\n */\nfunction splitObject(obj, predicate) {\n  const left = {};\n  const right = {};\n  Object.entries(obj).forEach(_ref => {\n    let [key, value] = _ref;\n    if (predicate(key)) {\n      left[key] = value;\n    } else {\n      right[key] = value;\n    }\n  });\n  return [left, right];\n}\nconst cloneDeep = obj => {\n  if (obj === null || obj === undefined || typeof obj !== 'object') {\n    return obj;\n  }\n  if (obj instanceof Array) {\n    return obj.reduce((arr, item, i) => {\n      arr[i] = cloneDeep(item);\n      return arr;\n    }, []);\n  }\n  if (obj instanceof Object) {\n    return Object.keys(obj || {}).reduce((cpObj, key) => {\n      cpObj[key] = cloneDeep(obj[key]);\n      return cpObj;\n    }, {});\n  }\n};\nexport { areEmptyArrays, areEmptyObjects, capitalize, classNameModifier, classNameModifierByFlag, cloneDeep, groupLog, has, isEmpty, isEmptyObject, isFunction, isMap, isNil, isObject, isSet, isString, isUndefined, noop, sanitizeNamespaceImport, splitObject, templateJoin };","map":{"version":3,"names":["sanitizeNamespaceImport","namespaceModule","sanitizedNamespaceModule","default","undefined","isObject","value","Array","isArray","isString","Object","prototype","toString","call","isMap","isSet","isUndefined","isNil","isEmpty","size","length","key","has","isEmptyArray","areEmptyArrays","_len","arguments","values","_key","every","isEmptyObject","areEmptyObjects","_len2","_key2","capitalize","charAt","toUpperCase","slice","hasOwnProperty","isFunction","classNameModifier","base","modifier","classNameModifierByFlag","flag","templateJoin","template","reduce","acc","curr","noop","groupLog","groupName","_len3","events","_key3","hasEvents","console","groupCollapsed","forEach","event","log","groupEnd","splitObject","obj","predicate","left","right","entries","_ref","cloneDeep","arr","item","i","keys","cpObj"],"sources":["C:/Users/lvsct/Desktop/bitcoin-prediction/node_modules/@aws-amplify/ui/dist/esm/utils/utils.mjs"],"sourcesContent":["/**\n * @deprecated - will be removed in a future major version\n *\n * Some libraries may not follow Node ES module spec and could be loaded as CommonJS modules,\n * To ensure the interoperability between ESM and CJS, modules from those libraries have to be loaded via namespace import\n * And sanitized by the function below because unlike ESM namespace, CJS namespace set `module.exports` object on the `default` key\n * https://nodejs.org/api/esm.html#interoperability-with-commonjs\n */\nconst sanitizeNamespaceImport = (namespaceModule) => {\n    const sanitizedNamespaceModule = { default: undefined, ...namespaceModule };\n    return sanitizedNamespaceModule.default ?? sanitizedNamespaceModule;\n};\n/**\n * Checks if `value` is an Object (non-primitive, non-array, non-function)\n * Will return false for Arrays and functions\n *\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is an object, `false` otherwise\n */\nfunction isObject(value) {\n    return value != null && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * Checks if `value` is a string primitive or object\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a string, `false` otherwise\n */\nfunction isString(value) {\n    return (typeof value === 'string' ||\n        (typeof value === 'object' &&\n            Object.prototype.toString.call(value) === '[object String]'));\n}\n/**\n * Checks if `value` is a Map\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a Map, `false` otherwise\n */\nfunction isMap(value) {\n    return (isObject(value) && Object.prototype.toString.call(value) === '[object Map]');\n}\n/**\n * Checks if `value` is a Set\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a Set, `false` otherwise\n */\nfunction isSet(value) {\n    return (isObject(value) && Object.prototype.toString.call(value) === '[object Set]');\n}\n/**\n * Checks if `value` is undefined\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is undefined, `false` otherwise\n */\nfunction isUndefined(value) {\n    return value === undefined;\n}\n/**\n * Checks if `value` is nullish\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is nullish, `false` otherwise\n */\nfunction isNil(value) {\n    return value == null;\n}\n/**\n * Checks if `value` is empty\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is empty, `false` otherwise\n */\nfunction isEmpty(value) {\n    if (value === null || value === undefined)\n        return true;\n    if (isObject(value) && (isMap(value) || isSet(value))) {\n        return !value.size;\n    }\n    if (isObject(value) && (isString(value) || Array.isArray(value))) {\n        return !value.length;\n    }\n    for (const key in value) {\n        if (has(value, key)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Checks if `value` is an empty array\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a empty, `false` otherwise\n */\nfunction isEmptyArray(value) {\n    return Array.isArray(value) && isEmpty(value);\n}\n/**\n * Checks if all members of the `values` param are empty arrays\n *\n * @param {unknown} value The values to check\n * @returns {boolean} Returns `true` if all members of `values` are empty, `false` otherwise\n */\nfunction areEmptyArrays(...values) {\n    return values.every(isEmptyArray);\n}\n/**\n * Checks if `value` is an empty object\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is empty, `false` otherwise\n */\nfunction isEmptyObject(value) {\n    return isObject(value) && isEmpty(value);\n}\n/**\n * Checks if all members of the `values` param are empty objects\n *\n * @param {unknown} values The values to check\n * @returns {boolean} Returns `true` if all members of the `values` param are empty, `false` otherwise\n */\nfunction areEmptyObjects(...values) {\n    return values.every(isEmptyObject);\n}\n/**\n * Capitalizes `value` and its return type\n *\n * @param {string} value string to capitalize\n * @returns {string} capitalized string\n */\nfunction capitalize(value) {\n    return (isString(value) ? value.charAt(0).toUpperCase() + value.slice(1) : '');\n}\n/**\n * Checks if `key` is a direct property of `value`\n *\n * @param {unknown} value `object` potentially containing property\n * @param {string} key property key\n * @returns whether `key` param is a property of the `obj` param\n */\nfunction has(value, key) {\n    return value != null && Object.prototype.hasOwnProperty.call(value, key);\n}\n/**\n * Checks if `value` is a function\n *\n * @param {unknown} value param to check\n * @returns {boolean} whether `value` is a function\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * This helper function creates modifier class names that are used for our flat BEM styling\n * it takes in a base and modifier and returns the modified class if a modifier was passed in and null otherwise\n * @param base The base class of the output\n * @param modifier The modifier to add onto the base\n * @returns the modified class name or empty string\n */\nconst classNameModifier = (base, modifier) => {\n    return modifier ? `${base}--${modifier}` : '';\n};\n/**\n * This helper function creates modified class names that are used for our flat BEM styling\n * it takes in a base, modifier, and flag and returns the modified class name if the flag is true and null if the flag is false\n * @param base\n * @param modifier\n * @param flag\n * @returns the modified class name or empty string\n */\nconst classNameModifierByFlag = (base, modifier, flag) => {\n    return flag ? `${base}--${modifier}` : '';\n};\n/**\n * Similar to `Array.join`, with an optional callback/template param\n * for formatting returned string values\n *\n * @param {string[]} values string array\n * @param {(value: string) => string} template callback format param\n * @returns formatted string array\n */\nfunction templateJoin(values, template) {\n    return values.reduce((acc, curr) => `${acc}${isString(curr) ? template(curr) : ''}`, '');\n}\n/**\n * A function that does nothing\n *\n * @param {any[]} _ accepts any parameters\n * @returns nothing\n */\nfunction noop(..._) {\n    return;\n}\n/**\n * @param {string} groupName name of group\n * @param events string values related to group\n */\nfunction groupLog(groupName, ...events) {\n    const hasEvents = !!events?.length;\n    if (hasEvents) {\n        // eslint-disable-next-line no-console\n        console.groupCollapsed(groupName);\n        events?.forEach((event) => {\n            // eslint-disable-next-line no-console\n            console.log(event);\n        });\n        // eslint-disable-next-line no-console\n        console.groupEnd();\n    }\n    else {\n        // eslint-disable-next-line no-console\n        console.log(groupName);\n    }\n}\n/**\n * Splits an object into 2 objects based on a predicate\n *\n * @param {object} obj an object to split into two\n * @param {function} predicate function to determin where an element should go\n * @returns\n */\nfunction splitObject(obj, predicate) {\n    const left = {};\n    const right = {};\n    Object.entries(obj).forEach(([key, value]) => {\n        if (predicate(key)) {\n            left[key] = value;\n        }\n        else {\n            right[key] = value;\n        }\n    });\n    return [left, right];\n}\nconst cloneDeep = (obj) => {\n    if (obj === null || obj === undefined || typeof obj !== 'object') {\n        return obj;\n    }\n    if (obj instanceof Array) {\n        return obj.reduce((arr, item, i) => {\n            arr[i] = cloneDeep(item);\n            return arr;\n        }, []);\n    }\n    if (obj instanceof Object) {\n        return Object.keys(obj || {}).reduce((cpObj, key) => {\n            cpObj[key] = cloneDeep(obj[key]);\n            return cpObj;\n        }, {});\n    }\n};\n\nexport { areEmptyArrays, areEmptyObjects, capitalize, classNameModifier, classNameModifierByFlag, cloneDeep, groupLog, has, isEmpty, isEmptyObject, isFunction, isMap, isNil, isObject, isSet, isString, isUndefined, noop, sanitizeNamespaceImport, splitObject, templateJoin };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}