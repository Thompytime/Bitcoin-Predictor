{"ast":null,"code":"import { getDataChunker } from '../apis/internal/uploadData/multipart/getDataChunker.mjs';\nimport { calculateContentCRC32 } from './crc32.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Calculates a combined CRC32 checksum for the given data.\n *\n * This function chunks the input data, calculates CRC32 for each chunk,\n * and then combines these checksums into a single value.\n *\n * @async\n * @param {StorageUploadDataPayload} data - The data to calculate the checksum for.\n * @param {number | undefined} size - The size of each chunk. If undefined, a default chunk size will be used.\n * @returns {Promise<string>} A promise that resolves to a string containing the combined CRC32 checksum\n *                            and the number of chunks, separated by a hyphen.\n */\nconst getCombinedCrc32 = async (data, size) => {\n  const crc32List = [];\n  const dataChunker = getDataChunker(data, size);\n  let totalLength = 0;\n  for (const {\n    data: checkData\n  } of dataChunker) {\n    const checksum = new Uint8Array((await calculateContentCRC32(checkData)).checksumArrayBuffer);\n    totalLength += checksum.length;\n    crc32List.push(checksum);\n  }\n  // Combine all Uint8Arrays into a single Uint8Array\n  const combinedArray = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const crc32Hash of crc32List) {\n    combinedArray.set(crc32Hash, offset);\n    offset += crc32Hash.length;\n  }\n  return `${(await calculateContentCRC32(combinedArray.buffer)).checksum}-${crc32List.length}`;\n};\nexport { getCombinedCrc32 };","map":{"version":3,"names":["getCombinedCrc32","data","size","crc32List","dataChunker","getDataChunker","totalLength","checkData","checksum","Uint8Array","calculateContentCRC32","checksumArrayBuffer","length","push","combinedArray","offset","crc32Hash","set","buffer"],"sources":["C:\\Users\\lvsct\\Desktop\\bitcoin-prediction\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\utils\\getCombinedCrc32.native.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getDataChunker } from '../apis/internal/uploadData/multipart/getDataChunker';\nimport { calculateContentCRC32 } from './crc32';\n/**\n * Calculates a combined CRC32 checksum for the given data.\n *\n * This function chunks the input data, calculates CRC32 for each chunk,\n * and then combines these checksums into a single value.\n *\n * @async\n * @param {StorageUploadDataPayload} data - The data to calculate the checksum for.\n * @param {number | undefined} size - The size of each chunk. If undefined, a default chunk size will be used.\n * @returns {Promise<string>} A promise that resolves to a string containing the combined CRC32 checksum\n *                            and the number of chunks, separated by a hyphen.\n */\nexport const getCombinedCrc32 = async (data, size) => {\n    const crc32List = [];\n    const dataChunker = getDataChunker(data, size);\n    let totalLength = 0;\n    for (const { data: checkData } of dataChunker) {\n        const checksum = new Uint8Array((await calculateContentCRC32(checkData)).checksumArrayBuffer);\n        totalLength += checksum.length;\n        crc32List.push(checksum);\n    }\n    // Combine all Uint8Arrays into a single Uint8Array\n    const combinedArray = new Uint8Array(totalLength);\n    let offset = 0;\n    for (const crc32Hash of crc32List) {\n        combinedArray.set(crc32Hash, offset);\n        offset += crc32Hash.length;\n    }\n    return `${(await calculateContentCRC32(combinedArray.buffer)).checksum}-${crc32List.length}`;\n};\n"],"mappings":";;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAACA,gBAAgB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,IAAI,KAAK;EAClD,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAMC,WAAW,GAAGC,cAAc,CAACJ,IAAI,EAAEC,IAAI,CAAC;EAC9C,IAAII,WAAW,GAAG,CAAC;EACnB,KAAK,MAAM;IAAEL,IAAI,EAAEM;EAAS,CAAE,IAAIH,WAAW,EAAE;IAC3C,MAAMI,QAAQ,GAAG,IAAIC,UAAU,CAAC,CAAC,MAAMC,qBAAqB,CAACH,SAAS,CAAC,EAAEI,mBAAmB,CAAC;IAC7FL,WAAW,IAAIE,QAAQ,CAACI,MAAM;IAC9BT,SAAS,CAACU,IAAI,CAACL,QAAQ,CAAC;EAChC;EACA;EACI,MAAMM,aAAa,GAAG,IAAIL,UAAU,CAACH,WAAW,CAAC;EACjD,IAAIS,MAAM,GAAG,CAAC;EACd,KAAK,MAAMC,SAAS,IAAIb,SAAS,EAAE;IAC/BW,aAAa,CAACG,GAAG,CAACD,SAAS,EAAED,MAAM,CAAC;IACpCA,MAAM,IAAIC,SAAS,CAACJ,MAAM;EAClC;EACI,OAAO,GAAG,CAAC,MAAMF,qBAAqB,CAACI,aAAa,CAACI,MAAM,CAAC,EAAEV,QAAQ,IAAIL,SAAS,CAACS,MAAM,EAAE;AAChG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}