{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { calculateContentMd5 } from '../../../utils/md5.mjs';\nimport { resolveS3ConfigAndInput } from '../../../utils/resolveS3ConfigAndInput.mjs';\nimport '../../../../../errors/types/validation.mjs';\nimport '../../../../../utils/logger.mjs';\nimport { validateBucketOwnerID } from '../../../utils/validateBucketOwnerID.mjs';\nimport { validateStorageOperationInput } from '../../../utils/validateStorageOperationInput.mjs';\nimport { CHECKSUM_ALGORITHM_CRC32, STORAGE_INPUT_KEY } from '../../../utils/constants.mjs';\nimport '../../../utils/client/s3data/base.mjs';\nimport '../../../utils/client/s3data/getObject.mjs';\nimport '../../../utils/client/s3data/listObjectsV2.mjs';\nimport { putObject } from '../../../utils/client/s3data/putObject.mjs';\nimport '../../../utils/client/s3data/createMultipartUpload.mjs';\nimport '../../../utils/client/s3data/uploadPart.mjs';\nimport '../../../utils/client/s3data/completeMultipartUpload.mjs';\nimport '../../../utils/client/s3data/listParts.mjs';\nimport '../../../utils/client/s3data/abortMultipartUpload.mjs';\nimport '../../../utils/client/s3data/copyObject.mjs';\nimport '../../../utils/client/s3data/headObject.mjs';\nimport '../../../utils/client/s3data/deleteObject.mjs';\nimport { getStorageUserAgentValue } from '../../../utils/userAgent.mjs';\nimport { calculateContentCRC32 } from '../../../utils/crc32.mjs';\nimport { constructContentDisposition } from '../../../utils/constructContentDisposition.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Get a function the returns a promise to call putObject API to S3.\n *\n * @internal\n */\nconst putObjectJob = (uploadDataInput, abortSignal, totalLength) => async () => {\n  const {\n    options: uploadDataOptions,\n    data\n  } = uploadDataInput;\n  const {\n    bucket,\n    keyPrefix,\n    s3Config,\n    isObjectLockEnabled,\n    identityId\n  } = await resolveS3ConfigAndInput(Amplify, uploadDataInput);\n  const {\n    inputType,\n    objectKey\n  } = validateStorageOperationInput(uploadDataInput, identityId);\n  validateBucketOwnerID(uploadDataOptions?.expectedBucketOwner);\n  const finalKey = inputType === STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n  const {\n    contentDisposition,\n    contentEncoding,\n    contentType = 'application/octet-stream',\n    preventOverwrite,\n    metadata,\n    checksumAlgorithm,\n    onProgress,\n    expectedBucketOwner\n  } = uploadDataOptions ?? {};\n  const checksumCRC32 = checksumAlgorithm === CHECKSUM_ALGORITHM_CRC32 ? await calculateContentCRC32(data) : undefined;\n  const contentMD5 =\n  // check if checksum exists. ex: should not exist in react native\n  !checksumCRC32 && isObjectLockEnabled ? await calculateContentMd5(data) : undefined;\n  const {\n    ETag: eTag,\n    VersionId: versionId\n  } = await putObject({\n    ...s3Config,\n    abortSignal,\n    onUploadProgress: onProgress,\n    userAgentValue: getStorageUserAgentValue(StorageAction.UploadData)\n  }, {\n    Bucket: bucket,\n    Key: finalKey,\n    Body: data,\n    ContentType: contentType,\n    ContentDisposition: constructContentDisposition(contentDisposition),\n    ContentEncoding: contentEncoding,\n    Metadata: metadata,\n    ContentMD5: contentMD5,\n    ChecksumCRC32: checksumCRC32?.checksum,\n    ExpectedBucketOwner: expectedBucketOwner,\n    IfNoneMatch: preventOverwrite ? '*' : undefined\n  });\n  const result = {\n    eTag,\n    versionId,\n    contentType,\n    metadata,\n    size: totalLength\n  };\n  return inputType === STORAGE_INPUT_KEY ? {\n    key: objectKey,\n    ...result\n  } : {\n    path: objectKey,\n    ...result\n  };\n};\nexport { putObjectJob };","map":{"version":3,"names":["putObjectJob","uploadDataInput","abortSignal","totalLength","options","uploadDataOptions","data","bucket","keyPrefix","s3Config","isObjectLockEnabled","identityId","resolveS3ConfigAndInput","Amplify","inputType","objectKey","validateStorageOperationInput","validateBucketOwnerID","expectedBucketOwner","finalKey","STORAGE_INPUT_KEY","contentDisposition","contentEncoding","contentType","preventOverwrite","metadata","checksumAlgorithm","onProgress","checksumCRC32","CHECKSUM_ALGORITHM_CRC32","calculateContentCRC32","undefined","contentMD5","calculateContentMd5","ETag","eTag","VersionId","versionId","putObject","onUploadProgress","userAgentValue","getStorageUserAgentValue","StorageAction","UploadData","Bucket","Key","Body","ContentType","ContentDisposition","constructContentDisposition","ContentEncoding","Metadata","ContentMD5","ChecksumCRC32","checksum","ExpectedBucketOwner","IfNoneMatch","result","size","key","path"],"sources":["C:\\Users\\lvsct\\Desktop\\bitcoin-prediction\\node_modules\\@aws-amplify\\storage\\src\\providers\\s3\\apis\\internal\\uploadData\\putObjectJob.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { StorageAction } from '@aws-amplify/core/internals/utils';\nimport { calculateContentMd5, resolveS3ConfigAndInput, validateBucketOwnerID, validateStorageOperationInput, } from '../../../utils';\nimport { putObject } from '../../../utils/client/s3data';\nimport { getStorageUserAgentValue } from '../../../utils/userAgent';\nimport { CHECKSUM_ALGORITHM_CRC32, STORAGE_INPUT_KEY, } from '../../../utils/constants';\nimport { calculateContentCRC32 } from '../../../utils/crc32';\nimport { constructContentDisposition } from '../../../utils/constructContentDisposition';\n/**\n * Get a function the returns a promise to call putObject API to S3.\n *\n * @internal\n */\nexport const putObjectJob = (uploadDataInput, abortSignal, totalLength) => async () => {\n    const { options: uploadDataOptions, data } = uploadDataInput;\n    const { bucket, keyPrefix, s3Config, isObjectLockEnabled, identityId } = await resolveS3ConfigAndInput(Amplify, uploadDataInput);\n    const { inputType, objectKey } = validateStorageOperationInput(uploadDataInput, identityId);\n    validateBucketOwnerID(uploadDataOptions?.expectedBucketOwner);\n    const finalKey = inputType === STORAGE_INPUT_KEY ? keyPrefix + objectKey : objectKey;\n    const { contentDisposition, contentEncoding, contentType = 'application/octet-stream', preventOverwrite, metadata, checksumAlgorithm, onProgress, expectedBucketOwner, } = uploadDataOptions ?? {};\n    const checksumCRC32 = checksumAlgorithm === CHECKSUM_ALGORITHM_CRC32\n        ? await calculateContentCRC32(data)\n        : undefined;\n    const contentMD5 = \n    // check if checksum exists. ex: should not exist in react native\n    !checksumCRC32 && isObjectLockEnabled\n        ? await calculateContentMd5(data)\n        : undefined;\n    const { ETag: eTag, VersionId: versionId } = await putObject({\n        ...s3Config,\n        abortSignal,\n        onUploadProgress: onProgress,\n        userAgentValue: getStorageUserAgentValue(StorageAction.UploadData),\n    }, {\n        Bucket: bucket,\n        Key: finalKey,\n        Body: data,\n        ContentType: contentType,\n        ContentDisposition: constructContentDisposition(contentDisposition),\n        ContentEncoding: contentEncoding,\n        Metadata: metadata,\n        ContentMD5: contentMD5,\n        ChecksumCRC32: checksumCRC32?.checksum,\n        ExpectedBucketOwner: expectedBucketOwner,\n        IfNoneMatch: preventOverwrite ? '*' : undefined,\n    });\n    const result = {\n        eTag,\n        versionId,\n        contentType,\n        metadata,\n        size: totalLength,\n    };\n    return inputType === STORAGE_INPUT_KEY\n        ? { key: objectKey, ...result }\n        : { path: objectKey, ...result };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACY,MAACA,YAAY,GAAGA,CAACC,eAAe,EAAEC,WAAW,EAAEC,WAAW,KAAK,YAAY;EACnF,MAAM;IAAEC,OAAO,EAAEC,iBAAiB;IAAEC;EAAI,CAAE,GAAGL,eAAe;EAC5D,MAAM;IAAEM,MAAM;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,mBAAmB;IAAEC;EAAU,CAAE,GAAG,MAAMC,uBAAuB,CAACC,OAAO,EAAEZ,eAAe,CAAC;EAChI,MAAM;IAAEa,SAAS;IAAEC;EAAS,CAAE,GAAGC,6BAA6B,CAACf,eAAe,EAAEU,UAAU,CAAC;EAC3FM,qBAAqB,CAACZ,iBAAiB,EAAEa,mBAAmB,CAAC;EAC7D,MAAMC,QAAQ,GAAGL,SAAS,KAAKM,iBAAiB,GAAGZ,SAAS,GAAGO,SAAS,GAAGA,SAAS;EACpF,MAAM;IAAEM,kBAAkB;IAAEC,eAAe;IAAEC,WAAW,GAAG,0BAA0B;IAAEC,gBAAgB;IAAEC,QAAQ;IAAEC,iBAAiB;IAAEC,UAAU;IAAET;EAAmB,CAAG,GAAGb,iBAAiB,IAAI,EAAE;EAClM,MAAMuB,aAAa,GAAGF,iBAAiB,KAAKG,wBAAwB,GAC9D,MAAMC,qBAAqB,CAACxB,IAAI,CAAC,GACjCyB,SAAS;EACf,MAAMC,UAAU;EACpB;EACI,CAACJ,aAAa,IAAIlB,mBAAmB,GAC/B,MAAMuB,mBAAmB,CAAC3B,IAAI,CAAC,GAC/ByB,SAAS;EACf,MAAM;IAAEG,IAAI,EAAEC,IAAI;IAAEC,SAAS,EAAEC;EAAS,CAAE,GAAG,MAAMC,SAAS,CAAC;IACzD,GAAG7B,QAAQ;IACXP,WAAW;IACXqC,gBAAgB,EAAEZ,UAAU;IAC5Ba,cAAc,EAAEC,wBAAwB,CAACC,aAAa,CAACC,UAAU;EACzE,CAAK,EAAE;IACCC,MAAM,EAAErC,MAAM;IACdsC,GAAG,EAAE1B,QAAQ;IACb2B,IAAI,EAAExC,IAAI;IACVyC,WAAW,EAAExB,WAAW;IACxByB,kBAAkB,EAAEC,2BAA2B,CAAC5B,kBAAkB,CAAC;IACnE6B,eAAe,EAAE5B,eAAe;IAChC6B,QAAQ,EAAE1B,QAAQ;IAClB2B,UAAU,EAAEpB,UAAU;IACtBqB,aAAa,EAAEzB,aAAa,EAAE0B,QAAQ;IACtCC,mBAAmB,EAAErC,mBAAmB;IACxCsC,WAAW,EAAEhC,gBAAgB,GAAG,GAAG,GAAGO;EAC9C,CAAK,CAAC;EACF,MAAM0B,MAAM,GAAG;IACXtB,IAAI;IACJE,SAAS;IACTd,WAAW;IACXE,QAAQ;IACRiC,IAAI,EAAEvD;EACd,CAAK;EACD,OAAOW,SAAS,KAAKM,iBAAiB,GAChC;IAAEuC,GAAG,EAAE5C,SAAS;IAAE,GAAG0C;EAAM,CAAE,GAC7B;IAAEG,IAAI,EAAE7C,SAAS;IAAE,GAAG0C;EAAM,CAAE;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}